<?php

namespace ArcaSolutions\WebBundle\Repository;

use ArcaSolutions\ArticleBundle\Entity\Article;
use ArcaSolutions\BlogBundle\Entity\Post;
use ArcaSolutions\ClassifiedBundle\Entity\Classified;
use ArcaSolutions\DealBundle\Entity\Promotion;
use ArcaSolutions\EventBundle\Entity\Event;
use ArcaSolutions\ListingBundle\Entity\Listing;
use ArcaSolutions\WebBundle\Entity\Slider;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityRepository;


/**
 * SliderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SliderRepository extends EntityRepository
{
    /**
     * Description
     *
     * @param bool $count
     * @deprecated It will be removed in future version, because of the count parameter.
     *
     * @return \Doctrine\Common\Collections\Collection|int
     */
    public function getSliders($count = false)
    {
        $matching = $this->matching(
            Criteria::create()
                ->where(Criteria::expr()->neq('imageId', 0))
                ->andWhere(Criteria::expr()->eq('area', 'web'))
                ->orderBy(["slideOrder" => "asc"])
                ->setMaxResults(5)
        );

        if ($count) {
            return $matching->count();
        }

        return $matching;
    }

    /**
     * @param string $area Possible values (web|app_home|app_listing)
     * @return \Doctrine\Common\Collections\Collection|array
     */
    public function getSlidersByArea($area = 'web')
    {
        $matching = $this->matching(
            Criteria::create()
                ->where(Criteria::expr()->neq('imageId', 0))
                ->andWhere(Criteria::expr()->eq('area', $area))
                ->orderBy(["slideOrder" => "asc"])
        );

        return $matching;
    }

    /**
     * Checks if the slider is valid.
     * Contitions that makes a slider valid:
     * The linked entity (Article, Post, Listing, Event, Deal or Classified) status property should be active (A).
     * If the linked entity is an event, the dates should be valid.
     * If the linked entity is an deal, your linked listing should be active and valid.
     *
     * @param Slider $slider
     * @return bool
     * @throws \Exception
     */
    public function isValid(Slider $slider)
    {
        $match = preg_match('/^([a-z]+)_([0-9]+)$/', $slider->getLink(), $matches);
        $module = $matches[1];
        $id = $matches[2];
        $nullDate = new \DateTime(date('Y-m-d', strtotime('0000-00-00')));
        $now = new \DateTime(date('Y-m-d'));

        if (!$match) {
            return true;
        }

        $modules = [
            'article'    => Article::class,
            'blog'       => Post::class,
            'classified' => Classified::class,
            'deal'       => Promotion::class,
            'event'      => Event::class,
            'listing'    => Listing::class,
        ];

        if (!in_array($module, array_keys($modules))) {
            throw new \Exception('Module not found.');
        }

        $entity = $this->getEntityManager()
            ->getRepository($modules[$module])
            ->find($id);

        if (!$entity || $entity->getStatus() != 'A') {
            return false;
        }

        if ('event' == $module) {
            return (($entity->getUntilDate() >= $now ||
                $entity->getEndDate() == null ||
                $entity->getEndDate() == $nullDate ||
                $entity->getEndDate() >= $now) &&
                $entity->getRepeatEvent() == 'N') ||
                $entity->getRepeatEvent() == 'Y';
        }

        if('deal' == $module) {
            /** @var $entity Promotion */
            $listing = $entity->getListing();
            return $listing->getStatus() == 'A' &&
                $entity->getAmount() > 0 &&
                $entity->getStartDate() <= $now  &&
                ($entity->getEndDate() == null ||
                $entity->getEndDate() == $nullDate ||
                $entity->getEndDate() >= $now);
        }

        return true;
    }

    /**
     * @param string $area Possible values (web|app_home|app_listing)
     * @return array
     */
    public function getSlidersByAreaSitemgr($area = 'web')
    {
        $matching = $this->matching(
            Criteria::create()
                ->where(Criteria::expr()->eq('area', $area))
                ->orderBy(["slideOrder" => "asc"])
        );

        return $matching;
    }
}
