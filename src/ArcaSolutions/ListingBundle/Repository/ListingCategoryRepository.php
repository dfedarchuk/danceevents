<?php

namespace ArcaSolutions\ListingBundle\Repository;

use ArcaSolutions\CoreBundle\Repository\EntityCategoryRepository;
use ArcaSolutions\ListingBundle\Entity\ListingCategory;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;


/**
 * ListingCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ListingCategoryRepository extends EntityCategoryRepository
{
    /**
     * ListingCategoryRepository constructor.
     * Sets active items field
     *
     * @param EntityManager $em
     * @param ClassMetadata $class
     */
    public function __construct(EntityManager $em, ClassMetadata $class)
    {
        parent::__construct($em, $class);

    }

    /**
     * {@inheritdoc}
     */
    public function getParentCategories($limit = null, $featured = true)
    {
        $this->setMaxItems($limit);

        return parent::getParentCategories($featured);
    }

    /**
     * Get the categories with most active listings, ordered alphabetically.
     *
     * @param int $limit
     * @return ListingCategory[]
     */
    public function getBestOfCategories($limit = null)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c, count(l.id) as qtd')
            ->join('c.listingCategory', 'lc')
            ->join('lc.listing', 'l')
            ->andWhere('c.enabled = :enabled')
            ->setParameter('status', 'A')
            ->andWhere('l.status = :status')
            ->setParameter('enabled', 'y')
            ->groupBy('c.id')
            ->orderBy('qtd', 'DESC')
            ->setMaxResults($limit);

        $result = $qb->getQuery()->getResult();

        $categories = [];

        array_walk_recursive($result, function ($item) use (&$categories) {
            if ($item instanceof ListingCategory) {
                $categories[] = $item;
            }
        });

        // Sorts alphabetically
        usort($categories, function ($a, $b) {
            return strcmp($a->getTitle(), $b->getTitle());
        });

        return $categories;
    }
}
