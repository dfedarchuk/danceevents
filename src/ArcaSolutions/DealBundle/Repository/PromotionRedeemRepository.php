<?php

namespace ArcaSolutions\DealBundle\Repository;

use ArcaSolutions\DealBundle\Entity\Promotion;
use ArcaSolutions\DealBundle\Entity\PromotionRedeem;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\Util\SecureRandom;

/**
 * PromotionRedeem
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRedeemRepository extends EntityRepository
{
    /**
     * Generate a new redeem code and save it
     * Decrease deal's amount
     *
     * @param           $userId
     * @param Promotion $deal
     *
     * @return PromotionRedeem
     */
    public function redeemCode(Promotion $deal, $userId)
    {
        /* generate the code using symfony's function */
        $secureClass = new SecureRandom();
        $code = bin2hex($secureClass->nextBytes(4));

        /* save the code */
        $redeem = new PromotionRedeem();
        $redeem->setFacebooked(0)
            ->setTwittered(0)
            ->setProfileName('')
            ->setAccountId($userId)
            ->setPromotionId($deal->getId())
            ->setDeal($deal)
            ->setNetworkResponse('no facebook')
            ->setRedeemCode($code)
            ->setDatetime(new \DateTime('now'));

        $entityManager = $this->getEntityManager();
        $entityManager->persist($redeem);

        /* decrease deal's amount */
        $deal->setAmount($deal->getAmount() - 1);
        $entityManager->persist($deal);

        /* execute queries */
        $entityManager->flush([$redeem, $deal]);

        return $redeem;
    }

    /**
     *
     *
     * @param Promotion $deal
     * @param           $userId
     *
     * @return PromotionRedeem
     */
    public function existUserCodeForDeal(Promotion $deal, $userId)
    {
        return $this->findOneBy(['accountId' => $userId, 'promotionId' => $deal->getId()]);
    }
}
